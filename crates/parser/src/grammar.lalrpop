use crate::ast::*;
use crate::lexer::Token;
use crate::{Error, Location};

grammar<'a>(input: &'a str);

pub Program: Program = {
    <statements: Stmt*> => Program { statements },
};

pub Stmt: Stmt = {
    "def" <name: Name> "(" <params: List<Param>> ")" ":" <return_type: Name> "=" <body: Expr> =>
        Stmt::Def {
            name,
            params,
            return_type,
            body: Box::new(body),
        },
    Expr => Stmt::Expr(<>),
};

Param: (String, String) = {
    <Name> ":" <Name> => (<>),
};

pub Expr: Expr = AddExpr;

AddExpr: Expr = {
    <left: AddExpr> <op: AddOp> <right: MulExpr> =>
        Expr::BinOp { op, left: Box::new(left), right: Box::new(right) },
    MulExpr,
};

AddOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

MulExpr: Expr = {
    <left: MulExpr> <op: MulOp> <right: Term> =>
        Expr::BinOp { op, left: Box::new(left), right: Box::new(right) },
    Term,
};

MulOp: BinOp = {
    "*" => BinOp::Mul,
};

pub Term: Expr = {
    <name: Name> => Expr::Ident(name),
    "INT" => Expr::IntLit(<>.to_string()),
    "(" <expr: Expr> ")" => expr,
};

Name: String = "IDENT" => <>.to_string();

#[inline]
List<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    },
};

extern {
    type Location = Location;
    type Error = Error;

    enum Token<'a> {
        "IDENT" => Token::Ident(<&'a str>),
        "INT" => Token::Int(<&'a str>),
        "STRING" => Token::String(<&'a str>),
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "^" => Token::Caret,
        "!" => Token::Not,
        "&" => Token::And,
        "|" => Token::Or,
        "=" => Token::Eq,
        "==" => Token::EqEq,
        ">" => Token::Gt,
        "<" => Token::Lt,
        ">=" => Token::Ge,
        "<=" => Token::Le,
        "->" => Token::RArrow,
        "=>" => Token::FatArrow,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "[" => Token::LBrace,
        "]" => Token::RBrace,
        "{" => Token::LBracket,
        "}" => Token::RBracket,
        "." => Token::Dot,
        "," => Token::Comma,
        ";" => Token::Semi,
        ":" => Token::Colon,
        "NEWLINE" => Token::Nl,
        "def" => Token::KwDef,
        "let" => Token::KwLet,
    }
}
